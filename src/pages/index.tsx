import type { Decimal } from "@prisma/client/runtime";
import { Field, Form, Formik } from "formik";
import type { FieldProps, FormikHelpers } from "formik";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import type { FunctionComponent } from "react";
import { z } from "zod";
import { api } from "~/utils/api";

const initialData = {
  amount: 0,
  type: "",
};

const CurrentBalance: FunctionComponent<{
  amount: Decimal | null | undefined;
  loading: boolean;
}> = ({ loading, amount }) => {
  return amount ? (
    <h1 className="text-2xl">
      {loading ? (
        <span>Recalculating...</span>
      ) : (
        <>
          <span className="hidden sm:inline">Current balance</span>
          <span className="inline sm:hidden">Balance</span>
          <span> ${(amount as unknown as string) || 0}</span>
        </>
      )}
    </h1>
  ) : null;
};

type FormValues = { type: string; amount: number };

const validation = z
  .object({
    amount: z.number().positive().safe(),
    type: z.string().min(1, "Select an option first"),
  })
  .required();

export default function Home() {
  const {
    data,
    isRefetching: amountLoading,
    refetch,
  } = api.movement.getBalance.useQuery();
  const { isLoading, mutateAsync } = api.movement.create.useMutation();
  const { data: sessionData } = useSession();

  const handleSubmit = async (
    formValues: FormValues,
    helpers: FormikHelpers<FormValues>
  ) => {
    try {
      let amount = Number(formValues.amount);
      amount = formValues.type === "decrease" ? amount * -1 : amount;
      await mutateAsync({ amount });
      void refetch();
      helpers.resetForm();
    } catch (error) {
      console.error("error while sending expense", error);
    }
  };

  const handleValidation = (formValues: FormValues) => {
    const errors: Record<keyof FormValues, string | undefined> = {
      amount: undefined,
      type: undefined,
    };

    const response = validation.safeParse(formValues);
    if (response.success) {
      return {};
    } else {
      const newErrors = response.error.issues.reduce(
        (obj, err) => ({
          ...obj,
          [err.path[0] as string]: err.message,
        }),
        errors
      );
      return newErrors;
    }
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="relative mx-auto min-h-full bg-gradient-to-b from-[#2e026d] to-[#15162c] px-6 text-white">
        <div className="container mx-auto flex flex-col">
          <div className="flex h-16 items-center justify-between">
            <CurrentBalance
              loading={isLoading || amountLoading}
              amount={data?._sum.amount}
            />

            <header className="flex justify-end">
              <button
                className="rounded-full bg-white/10 px-4 py-2 font-semibold text-white no-underline transition hover:bg-white/20"
                onClick={
                  sessionData ? () => void signOut() : () => void signIn()
                }
              >
                {sessionData ? "Sign out" : "Sign in"}
              </button>
            </header>
          </div>

          <hr />

          <Formik
            validate={handleValidation}
            initialValues={initialData}
            onSubmit={(values, props) => handleSubmit(values, props)}
          >
            {({ errors, isSubmitting, isValidating, values }) => (
              <div className="mt-4">
                <Form className="flex flex-col gap-4">
                  <Field name="amount" placeholder="420" required>
                    {({ field, meta }: FieldProps) => (
                      <label>
                        <span>Amount</span>
                        <div className="relative">
                          <span className="absolute left-0 text-black">$</span>
                        </div>
                        <input
                          className="pl-4 text-black"
                          required
                          type="number"
                          {...field}
                        />
                        {meta.touched && meta.error && (
                          <div className="text-red-500">{meta.error}</div>
                        )}
                      </label>
                    )}
                  </Field>

                  <div className="flex flex-col">
                    <div className="flex gap-4">
                      <label
                        className={`select-none bg-slate-500 px-2 py-2 ${
                          values.type === "increase" ? "bg-slate-600" : ""
                        }`}
                      >
                        <Field
                          className="hidden"
                          type="radio"
                          name="type"
                          value="increase"
                        />
                        <span>Add +</span>
                      </label>
                      <label
                        className={`select-none bg-slate-500 px-2 py-2 ${
                          values.type === "decrease" ? "bg-slate-600" : ""
                        }`}
                      >
                        <Field
                          className="hidden"
                          type="radio"
                          name="type"
                          value="decrease"
                        />
                        <span>Remove -</span>
                      </label>
                    </div>
                    {errors.type && (
                      <span className="text-red-500">{errors.type}</span>
                    )}
                  </div>

                  <div>
                    <button
                      disabled={isSubmitting || isLoading || isValidating}
                      type="submit"
                      className="rounded bg-gray-500 px-2 py-2"
                    >
                      Send expense
                    </button>
                  </div>
                </Form>
              </div>
            )}
          </Formik>
        </div>
      </main>
    </>
  );
}
